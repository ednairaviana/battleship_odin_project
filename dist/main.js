(()=>{"use strict";class t{constructor(t){this.length=t,this.isSunk=!1}hit(){this.length-=1,0===this.length&&(this.isSunk=!0)}}class e{constructor(){this.square=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],this.ships=[]}isAllSunk(){return!!this.ships.every((t=>!0===t.isSunk))}isEmptyCoordinate(t){const e=t[0],s=t[1];return 0===this.square[e][s]}isPossiblePlaceShip(t,e,s){const i=t[0],r=t[1];if("vertical"===e)for(let t=0;t<s;t++){if(i+s>10)return!1;if(0!==this.square[i+t][r])return!1}else if("horizontal"===e)for(let t=0;t<s;t++){if(r+s>10)return!1;if(0!==this.square[i][r+t])return!1}return!0}placeShip(e,s,i){const r=new t(i),o=e[0],a=e[1];if("vertical"===s)for(let t=0;t<i;t++)this.square[o+t][a]=r;else if("horizontal"===s)for(let t=0;t<i;t++)this.square[o][a+t]=r;this.ships.push(r)}receiveAttack(t){const e=t[0],s=t[1];return"object"==typeof this.square[e][s]?(this.square[e][s].hit(),this.square[e][s]=2,!0):(this.square[e][s]=1,!1)}}class s{constructor(){this.name="BOT",this.board=new e,this.enemy=null,this.turn=null,this.queue=[],this.allProbabilities=this.setAllProbabilities()}setAllProbabilities(){const t=[];for(let e=0;e<10;e++)for(let s=0;s<10;s++)t.push([e,s]);return t}attack(){this.allProbabilities=this.allProbabilities.filter((function(t){return void 0!==t}));let t=null;if(this.queue.length>0)t=this.queue.shift();else{const e=Math.floor(Math.random()*this.allProbabilities.length);t=this.allProbabilities[e],delete this.allProbabilities[e]}const e=t[0],s=t[1];return"object"==typeof this.enemy.board.square[e][s]&&this.filterQueue(e,s),this.enemy.board.receiveAttack([e,s]),[e,s]}filterQueue(t,e){[[t-1,e],[t+1,e],[t,e-1],[t,e+1]].forEach((t=>{this.allProbabilities.forEach(((e,s)=>{t[0]===e[0]&&t[1]===e[1]&&(this.queue.push([e[0],e[1]]),delete this.allProbabilities[s])}))}))}placeAllShips(){const t=[2,2,3,3,4,4,5];let e=0;for(;e<t.length;){const s=Math.floor(10*Math.random()),i=Math.floor(10*Math.random());let r=Math.floor(2*Math.random());r=0===r?"horizontal":"vertical",this.board.isPossiblePlaceShip([s,i],r,t[e])&&(this.board.placeShip([s,i],r,t[e]),e++)}}checkGameOver(){return!!this.board.isAllSunk()}}const i={plOne:null,plTwo:null,isCurrentTurn:!0,board:{first:document.querySelector("#first"),second:document.querySelector("#second")}};function r(t,e,s,r,n){const c=document.createElement("div");c.classList.add("square"),r&&(c.style.backgroundColor=n,c.style.boxShadow="inset 0 0 3px white"),t.insertAdjacentElement("beforeend",c),c.addEventListener("click",(async()=>{i.board.second.style.pointerEvents="none",i.plTwo.board.receiveAttack([e,s])?await l(c,n):await l(c,"#000"),i.plTwo.board.isAllSunk()?a(i.board.second,i.board.first,"YOU WIN!"):(o(),i.board.second.style.pointerEvents="auto")}))}const o=async()=>{const t=i.plTwo.attack(),e=parseInt(`${t[0]}${t[1]}`);1===i.plOne.board.square[t[0]][t[1]]?await l(i.board.first.childNodes[e],"#000"):await l(i.board.first.childNodes[e],"gray"),i.plOne.board.isAllSunk()&&a(i.board.first,i.board.second,"YOU LOSE!")};function a(t,e,s){e.style.opacity="0.2",e.style.pointerEvents="none";const r=document.createElement("div");r.classList.add("flex-center-column","display-msg"),r.innerHTML=`<p>${s}!!!</p>`;const o=document.createElement("div");o.classList.add("btn-restart"),o.innerText="NEW GAME",r.insertAdjacentElement("beforeend",o),o.addEventListener("click",(()=>{n(i.board.first),n(i.board.second),c()})),t.appendChild(r),t.style.pointerEvents="auto"}function n(t){for(;t.firstChild;)t.removeChild(t.firstChild)}const l=async(t,e)=>{const s=t=>new Promise((e=>setTimeout(e,t))),i=e;function r(e){t.style.backgroundColor=e}t.style.pointerEvents="none",await s(100),r("gray"),await s(100),r("#151515"),await s(100),r("gray"),await s(100),r(i),await s(500)};function c(){const t=new s,e=new s;t.enemy=e,e.enemy=t,i.plOne=t,i.plTwo=e,t.placeAllShips(),e.placeAllShips(),i.plOne.board.square.forEach(((t,e)=>{t.forEach(((t,s)=>{r(i.board.first,e,s,"object"==typeof t,"var(--fst-main-color)")}))})),i.plTwo.board.square.forEach(((t,e)=>{t.forEach(((t,s)=>{r(i.board.second,e,s,!1,"var(--scd-main-color)")}))})),i.board.first.pointerEvents="none",i.board.first.opacity="1",i.board.second.opacity="1",console.log(t.board.square),console.log(e.board.square)}c()})();